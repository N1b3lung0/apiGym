plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.flywaydb.flyway' version '10.4.1'
}

apply from: "$rootDir/constants.gradle"

group = 'n1b3lung0'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// DEVELOPER TOOLS
	developmentOnly "org.springframework.boot:spring-boot-devtools"
	annotationProcessor "org.projectlombok:lombok"
	compileOnly "org.projectlombok:lombok"
	developmentOnly "org.springframework.boot:spring-boot-docker-compose"

	// WEB
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// SECURITY

	// SQL
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
	implementation "org.flywaydb:flyway-core"
	runtimeOnly "org.postgresql:postgresql"

	// OPS
	implementation "org.springframework.boot:spring-boot-starter-actuator"

	// UTILS
	implementation "org.apache.commons:commons-lang3:${apacheCommonsLang3Version}"
	implementation "commons-validator:commons-validator:${apacheCommonsValidatorVersion}"
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'


	// TEST
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
	testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
	testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterApiVersion}"
	testImplementation "net.datafaker:datafaker:2.0.2"

	testAnnotationProcessor "org.projectlombok:lombok"
	testCompileOnly "org.projectlombok:lombok"
}

flyway {
	url = "jdbc:postgresql://localhost:5432/apigym"
	user = "apigym"
	password = "apigym"
}


// This section causes useful test output to go to the terminal.
test {
	useJUnitPlatform()
	environment("spring.profiles.active", testProfiles)
	testLogging {
		events "passed", "skipped", "failed" //, "standardOut", "standardError"

		showExceptions true
		exceptionFormat "full"
		showCauses true
		showStackTraces true

		// Change to `true` for more verbose test output
		showStandardStreams = false
	}
}

bootRun {
	environment("spring.profiles.active", devProfiles)
}